{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template": {
		"prefix": "templatecpp",
		"description": "cpp CP template",
		"body": [
			"$1#pragma region",
			"/*",
			"    Author: Jahangir Alam Rocky (jahangir1x.github.io)",
			"    Filename: ${TM_FILENAME}",
			"    Date: ${CURRENT_DAY_NAME}, ${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR} | ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} (UTC+6)",
			"    ¯\\_(ツ)_/¯",
			"*/",
			"#ifdef LOCAL_PLAYGROUND",
			"#include \".vscode/UTILS.hpp\"",
			"#endif",
			"#include <bits/stdc++.h>",
			"",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"typedef __gnu_pbds::tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;",
			"#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))",
			"#define in(x) \\",
			"    int x;    \\",
			"    cin >> x;",
			"#define FAST_IO                  \\",
			"    ios::sync_with_stdio(false); \\",
			"    cin.tie(NULL);",
			"#define endl '\\n'",
			"#pragma endregion",
			"// #define int long long",
			"",
			"",
			"void solve() {",
			"    $0",
			"}",
			"",
			"$4int32_t main() {",
			"    // FAST_IO",
			"#ifdef LOCAL_PLAYGROUND",
			"    // clock_t tStart = clock();",
			"    // freopen(\"test_input.txt\", \"r\", stdin);",
			"    // freopen(\"test_output_user.txt\", \"w\", stdout);",
			"#endif",
			"    int tests = 1;",
			"    // -----------------------|",
			"    //$2 cin >> tests;  //      |",
			"    // -----------------------|",
			"    rep(i, 1, tests + 1) {",
			"    //$3    cout << \"Case \" << i << \": \";",
			"        solve();",
			"    }",
			"#ifdef LOCAL_PLAYGROUND",
			"    // cerr << setprecision(10) << \"\\n----------------------\\nTime Taken: \" << (double)(clock() - tStart) / CLOCKS_PER_SEC << endl;",
			"#endif",
			"    return 0;",
			"}"
		]
	},
	"for loop macro": {
		"prefix": "rep",
		"description": "for loop macro for CP",
		"body": "#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))"
	},
	"vector of vector of strings": {
		"prefix": "vvs",
		"description": "short notation for vector of vector of strings.",
		"body": "vector<vector<string>> "
	},
	"vector of vector of ints": {
		"prefix": "vvi",
		"description": "short notation for vector of vector of ints.",
		"body": "vector<vector<int>> "
	},
	"vector of ints": {
		"prefix": "vi",
		"description": "short notation for vector of ints.",
		"body": "vector<int> "
	},
	"c++ CP header": {
		"prefix": "header",
		"description": "main c++ header and namespace declaration",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;"
		]
	},
	"c++ main function boilerplate": {
		"prefix": "cmain",
		"description": "main function boilerplate for c++",
		"body": [
			"int main() {",
			"    $0",
			"",
			"    return 0;",
			"}",
		]
	},
	"vector of long longs": {
		"prefix": "vl",
		"description": "short notation for vector of long longs.",
		"body": "vector<ll> "
	},
	"vector of ints with size": {
		"prefix": "vis",
		"description": "short notation for vector of ints.",
		"body": "vector<int> ${1:v}(${2:n});\n$0"
	},
	"vector of bools": {
		"prefix": "vb",
		"description": "short notation for vector of bools.",
		"body": "vector<bool> "
	},
	"vector of strings": {
		"prefix": "vs",
		"description": "short notation for vector of strings.",
		"body": "vector<string> "
	},
	"pair of ints": {
		"prefix": "pi",
		"description": "short notation for pair of ints.",
		"body": "pair<int, int> "
	},
	"vector of vector of bools": {
		"prefix": "vvb",
		"description": "short notation for vector of vector of bools.",
		"body": "vector<vector<bool>> "
	},
	"Point structure for flood fill": {
		"prefix": "point",
		"description": "short notation for point structure with compare function.",
		"body": [
			"struct point {",
			"    int x;",
			"    int y;",
			"    int time = 0;",
			"    bool operator<(const point &other) const {",
			"        return x < other.x || (x == other.x && y < other.y);",
			"    }",
			"};"
		]
	},
	"min heap of pair": {
		"prefix": "minHeapPair",
		"description": "min heap using priority queue for pair of ints.",
		"body": "priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> ",
	},
	"print 2d vector": {
		"prefix": "print2d",
		"description": "prints 2d vector for debug purpose.",
		"body": [
			"rep(__x, 0, ${1:n}) {",
			"    rep(__y, 0, ${2:m}) {",
			"        cout << ${3:table}[__x][__y] << ' ';",
			"    }",
			"    cout << endl;",
			"}",
			"cout << endl;$0"
		]
	},
	"pring 1d vector": {
		"prefix": "print1d",
		"description": "prints 1d vector for debug purpose.",
		"body": [
			"rep(__x, 0, ${1:n}) cout << ${2:table}[__x] << ' ';",
			"cout << \"\\n\\n\";",
			""
		]
	},
	"C++ header for LC": {
		"prefix": "inn",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			""
		],
		"description": "C++ header for LeetCode"
	},
	"C++ testcode for LC": {
		"prefix": "leetcode",
		"body": [
			"int main() {",
			"    cout << unitbuf;",
			"    Solution s;",
			"",
			"    vector<int> nums = {1, 2, 2, 1, 1, 3};",
			"    // string str = \"abcdefg\";",
			"    // int x = 123;",
			"    auto ans = s.topKFrequent(nums, 2);",
			"",
			"    cout << ans << endl;",
			"",
			"    for (auto x : ans) {",
			"        cout << x << \" \";",
			"    }",
			"    cout << endl;",
			"",
			"    // cout << s.topKFrequent(nums, 2) << endl;",
			"",
			"    return 0;",
			"}"
		],
		"description": "C++ demo testcode for LeetCode"
	}
}